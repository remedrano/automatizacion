rule Petrinet2Graph 

transform p : Petrinet!Petrinet
to g : Graph!Graph {

	// Para convertir se va arco por arco convirtiendo el origen y el destino.
	// Es necesario tener variables para garantizar que no se repitan elementos.	
	var nodoOrigenGrafo : Graph!Node;
	var nodoDestinoGrafo : Graph!Node;
	for (arco in Petrinet!Arc.allInstances){
		arco.src.name.println();
		arco.dest.name.println();		
		"FIN".println();	
		// Como cada elemento puede tener multiples arcos se debe mirar si ya creamos este nodo anteriormente		
		nodoOrigenGrafo = g.nodes.select(n | n.name = arco.src.name)->first();		
		nodoDestinoGrafo = g.nodes.select(n | n.name = arco.dest.name)->first();				
		
		// Sino ha sido creado, entonces es momento de hacerlo		
		if (nodoOrigenGrafo = null){		
			("Nuevo "+arco.src.name).println();		
			nodoOrigenGrafo = new Graph!Node;		
			nodoOrigenGrafo.name = arco.src.name;		
			g.nodes.add(nodoOrigenGrafo);	
		}				
		
		if (nodoDestinoGrafo = null){		
			("Nuevo "+arco.dest.name).println();		
			nodoDestinoGrafo = new Graph!Node;		
			nodoDestinoGrafo.name = arco.dest.name;		
			g.nodes.add(nodoDestinoGrafo);		
		}				 
		// Finalmente se convierte el arco a Edge con destino y origen establecidos		
		var edgeGrafo : new Graph!Edge;		
		edgeGrafo.source = nodoOrigenGrafo;		
		edgeGrafo.target = nodoDestinoGrafo;		
	}
				 
	// Ahora los huerfanos	
	for (node in Petrinet!Node.allInstances){
		// Como cada elemento puede tener multiples arcos se debe mirar si ya creamos este nodo anteriormente		
		var nodoGrafo = g.nodes.select(n | n.name = node.name)->first();				 	
		// Sino ha sido creado, entonces es momento de hacerlo	
		if (nodoGrafo = null){		
			nodoOrigenGrafo = new Graph!Node;		
			nodoOrigenGrafo.name = node.name;	
			//g.nodes.add(nodoOrigenGrafo);		
		}	
	}
}